<?xml version = "1.0"?>

<sanitize>
    <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
    </flaws>
    <path>
      <dir>func_preg_match</dir>
      <dir>only_letters</dir>
    </path>
    <comment>sanitize : check if there only letters</comment>
    <codes>
      <code>$re = "/^[a-zA-Z]*$/";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = "";
}</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "string" field = ""/>
      <constraint flawType = "eval_Injection" type = "string" field = ""/>
      <constraint flawType = "include_require_Injection" type = "string" field = ""/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
    </flaws>
    <path>
      <dir>func_preg_match</dir>
      <dir>only_numbers</dir>
    </path>
    <comment>sanitize : check if there only letters</comment>
    <codes>
      <code>$re = "/^[0-9]*$/";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = "";
}</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
    </flaws>
    <path>
      <dir>func_preg_match</dir>
      <dir>letters_numbers</dir>
    </path>
    <comment>sanitize : check if there only letters</comment>
    <codes>
      <code>$re = "/^[a-zA-Z0-9]*$/";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = "";
}</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "string" field = ""/>
      <constraint flawType = "eval_Injection" type = "string" field = ""/>
      <constraint flawType = "include_require_Injection" type = "string" field = ""/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
    </flaws>
    <path>
      <dir>func_preg_match</dir>
      <dir>no_filtering</dir>
    </path>
    <comment>sanitize : check if there only letters</comment>
    <codes>
      <code>$re = "/^.*$/";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = "";
}</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "string" field = ""/>
      <constraint flawType = "eval_Injection" type = "string" field = ""/>
      <constraint flawType = "include_require_Injection" type = "string" field = ""/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "0" needQuote = "0" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_FILTER</dir>
      <dir>CLEANING</dir>
      <dir>email_filter</dir>
    </path>
    <comment>Uses an email_filter via filter_var function</comment>
    <codes>
      <code>$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = "" ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "string" field = ""/>
      <constraint flawType = "eval_Injection" type = "string" field = ""/>
      <constraint flawType = "include_require_Injection" type = "string" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "1" styleBlock = "1" simpleQuote = "0" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_FILTER</dir>
      <dir>CLEANING</dir>
      <dir>full_special_chars_filter</dir>
    </path>
    <comment>Uses a full_special_chars_filter via filter_var function</comment>
    <codes>
      <code>$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
if (filter_var($sanitized, FILTER_VALIDATE_FULL_SPECIAL_CHARS))
  $tainted = $sanitized ;
else
  $tainted = "" ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "string" field = ""/>
      <constraint flawType = "eval_Injection" type = "string" field = ""/>
      <constraint flawType = "include_require_Injection" type = "string" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "OSCommand_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "1" styleBlock = "1" simpleQuote = "1" rule1 = "1" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_FILTER</dir>
      <dir>CLEANING</dir>
      <dir>magic_quotes_filter</dir>
    </path>
    <comment>Uses a magic_quotes_filter via filter_var function</comment>
    <codes>
      <code>$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
if (filter_var($sanitized, FILTER_VALIDATE_MAGIC_QUOTES))
  $tainted = $sanitized ;
else
  $tainted = "" ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "string" field = ""/>
      <constraint flawType = "eval_Injection" type = "string" field = ""/>
      <constraint flawType = "include_require_Injection" type = "string" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "eval_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "include_require_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "0" simpleQuote = "1" escape = "0" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_FILTER</dir>
      <dir>CLEANING</dir>
      <dir>number_float_filter</dir>
    </path>
    <comment>Uses a number_float_filter via filter_var function</comment>
    <codes>
      <code>$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_FLOAT);
if (filter_var($sanitized, FILTER_VALIDATE_NUMBER_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = "" ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "1" styleBlock = "1" simpleQuote = "1" URL_CSS_context = "1" property_CSS_context = "1" rule1  = "1" />
    </safeties>
    <safety safe = "1" needQuote = "0" />
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_FILTER</dir>
      <dir>CLEANING</dir>
      <dir>number_int_filter</dir>
    </path>
    <comment>Uses a number_int_filter via filter_var function</comment>
    <codes>
      <code>$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_INT);
if (filter_var($sanitized, FILTER_VALIDATE_NUMBER_INT))
  $tainted = $sanitized ;
else
  $tainted = "" ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "1" styleBlock = "1" simpleQuote = "1" URL_CSS_context = "1" property_CSS_context = "1" rule1  = "1" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_FILTER</dir>
      <dir>CLEANING</dir>
      <dir>special_chars_filter</dir>
    </path>
    <comment>Uses a special_chars_filter via filter_var function</comment>
    <codes>
      <code>$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
if (filter_var($sanitized, FILTER_VALIDATE_SPECIAL_CHARS))
  $tainted = $sanitized ;
else
  $tainted = "" ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "string" field = ""/>
      <constraint flawType = "eval_Injection" type = "string" field = ""/>
      <constraint flawType = "include_require_Injection" type = "string" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "OSCommand_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "1" simpleQuote = "1" rule1 = "1" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_FILTER</dir>
      <dir>VALIDATION</dir>
      <dir>email_filter</dir>
    </path>
    <comment>Flushes content of $sanitized if the filter email_filter is not applied</comment>
    <codes>
      <code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = "" ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "string" field = ""/>
      <constraint flawType = "eval_Injection" type = "string" field = ""/>
      <constraint flawType = "include_require_Injection" type = "string" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "1" styleBlock = "1" simpleQuote = "0" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>LDAP_Injection</flaw>
    </flaws>
    <path>
      <dir>func_FILTER</dir>
      <dir>VALIDATION</dir>
      <dir>full_special_chars_filter</dir>
    </path>
    <comment>Flushes content of $sanitized if the filter full_special_chars__filter is not applied</comment>
    <codes>
      <code>if (filter_var($sanitized, FILTER_VALIDATE_FULL_SPECIAL_CHARS))
  $tainted = $sanitized ;
else
  $tainted = "" ;</code>
    </codes>
    <constraints>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
    </constraints>
    <safeties>
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0"/>
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>LDAP_Injection</flaw>
    </flaws>
    <path>
      <dir>func_FILTER</dir>
      <dir>VALIDATION</dir>
      <dir>magic_quotes_filter</dir>
    </path>
    <comment>Flushes content of $sanitized if the filter magic_quotes_filter is not applied</comment>
    <codes>
      <code>if (filter_var($sanitized, FILTER_VALIDATE_MAGIC_QUOTES))
  $tainted = $sanitized ;
else
  $tainted = "" ;</code>
    </codes>
    <constraints>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
    </constraints>
    <safeties>
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0"/>
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_FILTER</dir>
      <dir>VALIDATION</dir>
      <dir>number_float_filter</dir>
    </path>
    <comment>Flushes content of $sanitized if the filter number_float_filter is not applied</comment>
    <codes>
      <code>if (filter_var($sanitized, FILTER_VALIDATE_NUMBER_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = "" ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "1" styleBlock = "1" simpleQuote = "1" URL_CSS_context = "1" property_CSS_context = "1" rule1  = "1" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_FILTER</dir>
      <dir>VALIDATION</dir>
      <dir>number_int_filter</dir>
    </path>
    <comment>Flushes content of $sanitized if the filter number_int_filter is not applied</comment>
    <codes>
      <code>if (filter_var($sanitized, FILTER_VALIDATE_NUMBER_INT))
  $tainted = $sanitized ;
else
  $tainted = "" ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "1" styleBlock = "1" simpleQuote = "1" URL_CSS_context = "1" property_CSS_context = "1" rule1  = "1" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
    </flaws>
    <path>
      <dir>func_FILTER</dir>
      <dir>VALIDATION</dir>
      <dir>special_chars_filter</dir>
    </path>
    <comment>Flushes content of $sanitized if the filter special_chars_filter is not applied</comment>
    <codes>
      <code>if (filter_var($sanitized, FILTER_VALIDATE_SPECIAL_CHARS))
  $tainted = $sanitized ;
else
  $tainted = "" ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "0" needQuote = "0" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>CAST</dir>
      <dir>cast_float</dir>
    </path>
    <comment>sanitize : cast in float</comment>
    <codes>
      <code>$tainted = (float) $tainted ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" safe = "1" />
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>CAST</dir>
      <dir>cast_float_sort_of</dir>
    </path>
    <comment>sanitize : cast via + = 0.0</comment>
    <codes>
      <code>$tainted + = 0.0 ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" safe = "1" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
      <flaw>SQL_IDOR</flaw>
      <flaw>XPath_IDOR</flaw>
    </flaws>
    <path>
      <dir>CAST</dir>
      <dir>cast_int</dir>
    </path>
    <comment>sanitize : cast into int</comment>
    <codes>
      <code>$tainted = (int) $tainted ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
      <constraint flawType = "SQL_IDOR"/>
      <constraint flawType = "XPath_IDOR"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" safe = "1" />
      <safety flawType = "SQL_IDOR" safe = "0" />
      <safety flawType = "XPath_IDOR" safe = "0" />
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>CAST</dir>
      <dir>cast_int_sort_of</dir>
    </path>
    <comment>sanitize : cast via + = 0</comment>
    <codes>
      <code>$tainted + = 0 ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" safe = "1" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>CAST</dir>
      <dir>cast_int_sort_of2</dir>
    </path>
    <comment>sanitize : cast via + = 0</comment>
    <codes>
      <code>$tainted = $tainted + 0;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" safe = "1" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>CAST</dir>
      <dir>func_settype_float</dir>
    </path>
    <comment>sanitize : settype (float)</comment>
    <codes>
      <code>if(settype($tainted, "float"))
  $tainted = $tainted ;
else
  $tainted = 0.0 ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" safe = "1" />
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>CAST</dir>
      <dir>func_settype_int</dir>
    </path>
    <comment>sanitize : use of settype_int</comment>
    <codes>
      <code>if (settype($tainted, "integer"))
  $tainted = $integer ;
else
  $tainted = 0 ;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" safe = "1" />
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_addslashes</dir>
    </path>
    <comment>sanitize : use of the function addslashes</comment>
    <codes>
      <code>$tainted = addslashes($tainted);</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "string" field = ""/>
      <constraint flawType = "eval_Injection" type = "string" field = ""/>
      <constraint flawType = "include_require_Injection" type = "string" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "eval_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "include_require_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "0" simpleQuote = "1" escape = "0" />
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
      <flaw>Fopen_IDOR</flaw>
    </flaws>
    <path>
      <dir>no_sanitizing</dir>
    </path>
    <comment>sanitize : none</comment>
    <codes>
      <code>$tainted = $tainted;</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "" field = ""/>
      <constraint flawType = "XPath_Injection" type = "" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "" field = ""/>
      <constraint flawType = "eval_Injection" type = "" field = ""/>
      <constraint flawType = "include_require_Injection" type = "" field = ""/>
      <constraint flawType = "XSS"/>
      <constraint flawType = "Fopen_IDOR" />
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "XSS" />
      <safety flawType = "Fopen_IDOR" safe = "0"/>
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_floatval</dir>
    </path>
    <comment>sanitize : use of floatval</comment>
    <codes>
      <code>$tainted = floatval($tainted);</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" safe = "1" />
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_htmlentities</dir>
    </path>
    <comment>sanitize : use of the function htmlentities. Sanitizes the query but has a high chance to produce unexpected results</comment>
    <codes>
      <code>$tainted = htmlentities($tainted, ENT_QUOTES);</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "string" field = ""/>
      <constraint flawType = "eval_Injection" type = "string" field = ""/>
      <constraint flawType = "include_require_Injection" type = "string" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "eval_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "include_require_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "1" styleBlock = "1" simpleQuote = "1" rule1 = "1" />
    </safeties>
    <relevancy>0.25</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_htmlspecialchars</dir>
    </path>
    <comment>sanitize : use of the function htmlspecialchars. Sanitizes the query but has a high chance to produce unexpected results</comment>
    <codes>
      <code>$tainted = htmlspecialchars($tainted, ENT_QUOTES);</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "string" field = ""/>
      <constraint flawType = "eval_Injection" type = "string" field = ""/>
      <constraint flawType = "include_require_Injection" type = "string" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "eval_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "include_require_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "1" styleBlock = "1" simpleQuote = "1" rule1 = "1" />
    </safeties>
    <relevancy>0.25</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_intval</dir>
    </path>
    <comment>sanitize : use of intval</comment>
    <codes>
      <code>$tainted = intval($tainted);</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" safe = "1" />
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_mysql_real_escape_string</dir>
    </path>
    <comment>SANITIZE : use of mysql_real_escape string</comment>
    <codes>
      <code>$tainted = mysql_real_escape_string($tainted);</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "int" field = ""/>
      <constraint flawType = "XPath_Injection" type = "int" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "int" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "int" field = ""/>
      <constraint flawType = "eval_Injection" type = "int" field = ""/>
      <constraint flawType = "include_require_Injection" type = "int" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "eval_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "include_require_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "XSS" escape = "1" doubleQuote = "1" scriptBlock = "0" simpleQuote = "1" rule1 = "0" />
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
      <flaw>Fopen_IDOR</flaw>
    </flaws>
    <path>
      <dir>func_preg_replace</dir>
    </path>
    <comment>SANITIZE : use of preg_replace</comment>
    <codes>
      <code>$tainted = preg_replace('/\'/', '', $tainted);</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "string" field = ""/>
      <constraint flawType = "eval_Injection" type = "string" field = ""/>
      <constraint flawType = "include_require_Injection" type = "string" field = ""/>
      <constraint flawType = "XSS"/>
      <constraint flawType = "Fopen_IDOR"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "eval_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "include_require_Injection" safe = "0" needQuote = "1" />
      <safety flawType = "XSS" simpleQuote = "1" />
      <safety flawType = "Fopen_IDOR" safe = "0"/>
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_preg_replace2</dir>
    </path>
    <comment>SANITIZE : use of preg_replace with another regex</comment>
    <codes>
      <code>$tainted = preg_replace('/\W/si','',$tainted);</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "string" field = ""/>
      <constraint flawType = "eval_Injection" type = "string" field = ""/>
      <constraint flawType = "include_require_Injection" type = "string" field = ""/>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "1" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "1" />
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "1" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "1" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "1" />
      <safety flawType = "XSS" safe = "1" doubleQuote = "1" scriptBlock = "1" styleBlock = "1" simpleQuote = "1" rule1 = "1" rule2 = "1" rule3 = "1" rule4 = "1" rule5  = "1" />
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
    </flaws>
    <path>
      <dir>ternary_white_list_order_direction</dir>
    </path>
    <comment>sanitize : use of ternary condition</comment>
    <codes>
      <code>$tainted = $tainted  == 'DESC' ? 'DESC' : 'ASC';</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = "ORDER_DIRECTION"/>
      <constraint flawType = "XPath_Injection" type = "string" field = "ORDER_DIRECTION"/>
      <constraint flawType = "LDAP_Injection" type = "string" field = "ORDER_DIRECTION"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
    </safeties>
    <relevancy>1</relevancy>
  </sample>

    <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
      <flaw>Fopen_IDOR</flaw> 
      <flaw>SQL_IDOR</flaw> 
      <flaw>XPath_IDOR</flaw>
    </flaws>
    <path>
      <dir>ternary_white_list</dir>
    </path>
    <comment>sanitize : use of ternary condition</comment>
    <codes>
      <code>$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "" field = ""/>
      <constraint flawType = "XPath_Injection" type = "" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "" field = ""/>
      <constraint flawType = "eval_Injection" type = "" field = ""/>
      <constraint flawType = "include_require_Injection" type = "" field = ""/>
      <constraint flawType = "XSS"/>
      <constraint flawType = "Fopen_IDOR"/>
      <constraint flawType = "SQL_IDOR"/>
      <constraint flawType = "XPath_IDOR"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" simpleQuote = "1" />
      <safety flawType = "Fopen_IDOR" safe = "1"/>
      <safety flawType = "SQL_IDOR" safe = "1"/>
      <safety flawType = "Xapth_IDOR" safe = "1"/>
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
    </flaws>
    <path>
      <dir>whitelist_using_array_from</dir>
    </path>
    <comment>SANITIZE : use in_array to check if $tainted is in the white list</comment>
    <codes>
      <code>$legal_table = array("users", "connexions");
if (in_array($tainted, $legal_table, true)) {
  $tainted = $tainted;
} else {
  $tainted = $legal_table[0];
}</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = "FROM"/>
      <constraint flawType = "XPath_Injection" type = "string" field = "FROM"/>
      <constraint flawType = "LDAP_Injection" type = "string" field = "FROM"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
    </safeties>
    <relevancy>1</relevancy>
  </sample>

    <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
      <flaw>LDAP_Injection</flaw>
      <flaw>OSCommand_Injection</flaw>
      <flaw>eval_Injection</flaw>
      <flaw>include_require_Injection</flaw>
      <flaw>XSS</flaw>
      <flaw>Fopen_IDOR</flaw> 
      <flaw>SQL_IDOR</flaw> 
      <flaw>XPath_IDOR</flaw>
    </flaws>
    <path>
      <dir>whitelist_using_array</dir>
    </path>
    <comment>SANITIZE : use in_array to check if $tainted is in the white list</comment>
    <codes>
      <code>$legal_table = array("safe1", "safe2");
if (in_array($tainted, $legal_table, true)) {
  $tainted = $tainted;
} else {
  $tainted = $legal_table[0];
}</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "" field = ""/>
      <constraint flawType = "XPath_Injection" type = "" field = ""/>
      <constraint flawType = "LDAP_Injection" type = "" field = ""/>
      <constraint flawType = "OSCommand_Injection" type = "" field = ""/>
      <constraint flawType = "eval_Injection" type = "" field = ""/>
      <constraint flawType = "include_require_Injection" type = "" field = ""/>
      <constraint flawType = "XSS"/>
      <constraint flawType = "Fopen_IDOR"/>
      <constraint flawType = "SQL_IDOR"/>
      <constraint flawType = "XPath_IDOR"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XPath_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "OSCommand_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "eval_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "include_require_Injection" safe = "1" needQuote = "0" />
      <safety flawType = "XSS" simpleQuote = "1" />
      <safety flawType = "Fopen_IDOR" safe = "1"/>
      <safety flawType = "SQL_IDOR" safe = "1"/>
      <safety flawType = "Xapth_IDOR" safe = "1"/>
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_IDOR</flaw>
    </flaws>
    <path>
      <dir>ESAPI</dir>
    </path>
    <comment>SANITIZE : uses of ESAPI, an OWASP API</comment> <!-- TODO check if usable in another context -->
    <codes>
      <code>$ESAPI = new ESAPI();
ESAPI::setEncoder(new DefaultEncoder());
ESAPI::setValidator(new DefaultValidator());
//verifying the data with ESAPI
if($ESAPI->validator->isValidNumber("Course ID", $tainted, 18, 25, false)) {
  $tainted = $tainted;
} else {
  $tainted = 0; //default value
}</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_IDOR"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_IDOR" safe = "1"/>
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_IDOR</flaw>
    </flaws>
    <path>
      <dir>Indirect_reference</dir>
    </path>
    <comment>SANITIZE : uses indirect reference</comment>
    <codes>
      <code>$course_array = array();
//get the user id
$user_id = intval($_SESSION[‘user_id’]);

//creation of the references with only data allowed to the user
$result = mysql_query("SELECT * FROM COURSE where course.allowed = {$user_id}");

while ($row = mysql_fetch_array($result)){
  $course_array[] = $result[‘id’];
}

$_SESSION[‘course_array’] = $course_array;
if (isset($_SESSION[‘course_array’])){
  $course_array = $_SESSION[‘course_array’];
  if (isset($course_array[$taintedId])){
    //indirect reference > get the right id
    $tainted = $course_array[$tainted];
  }
}
else {
  $tainted = 0; //default value
}</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_IDOR"/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_IDOR" safe = "1"/>
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>LDAP_Injection</flaw>
    </flaws>
    <path>
      <dir>func_preg_replace_ldap_char_white_list</dir>
    </path>
    <comment>SANITIZE : use preg_replace to keep only char, number and _ ,\, -</comment>
    <codes>
      <code>$tainted = preg_replace( "/[^a-zA-Z0-9_\ -]/", "", $tainted );</code>
    </codes>
    <constraints>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
    </constraints>
    <safeties>
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0"/>
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>LDAP_Injection</flaw>
    </flaws>
    <path>
      <dir>func_str_replace_ldap_char_black_list</dir>
    </path>
    <comment>SANITIZE : use str_replace to escape special chars -</comment>
    <codes>
      <code>$replace_tab = array('\\'  = > '\5c',
  '*'  = > '\2a',
  '('  = > '\28',
  ')'  = > '\29',
  "\x00"  = > '\00');
$tainted = str_replace(array_keys($replace_tab),array_values($replace_tab),$tainted);</code>
    </codes>
    <constraints>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
    </constraints>
    <safeties>
      <safety flawType = "LDAP_Injection" safe = "1" needQuote = "0"/>
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>LDAP_Injection</flaw>
    </flaws>
    <path>
      <dir>func_pg_escape_literal</dir>
    </path>
    <comment>SANITIZE : use of pg_escape_literal</comment>
    <codes>
      <code>$tainted = pg_escape_literal($tainted);</code>
    </codes>
    <constraints>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
    </constraints>
    <safeties>
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0"/>
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>LDAP_Injection</flaw>
    </flaws>
    <path>
      <dir>func_pg_escape_string</dir>
    </path>
    <comment>SANITIZE : use of pg_escape_string</comment>
    <codes>
      <code>$tainted = pg_escape_string($tainted);</code>
    </codes>
    <constraints>
      <constraint flawType = "LDAP_Injection" type = "string" field = ""/>
    </constraints>
    <safeties>
      <safety flawType = "LDAP_Injection" safe = "0" needQuote = "0"/>
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
    </flaws>
    <path>
      <dir>object</dir>
      <dir>func_mysql_real_escape_string</dir>
    </path>
    <comment>sanitize : use mysql_real_escape_string via an object</comment>
    <codes>
      <code>class Sanitize{
  public function sanitize($input){
    return mysql_real_escape_string($input);
  }
}
$temp = new Sanitize();
$tainted = $temp->sanitize($tainted);</code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "1"/>
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "1"/>
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>SQL_Injection</flaw>
      <flaw>XPath_Injection</flaw>
    </flaws>
    <path>
      <dir>object</dir>
      <dir>func_mysql_real_escape_stringGetter</dir>
    </path>
    <comment>sanitize : use mysql_real_escape_string via an object and a classic getter</comment>
    <codes>
      <code>class Sanitize{
  private $data;
  public function __construct($input){
    $this->data = $input ;
  }
  public function getData(){
    return $this->data;
  }
  public function sanitize(){
    $this->data = mysql_real_escape_string($this->data) ;
  }
}
$sanitizer = new Sanitize($tainted) ;
$sanitizer->sanitize();
$tainted = $sanitizer->getData(); </code>
    </codes>
    <constraints>
      <constraint flawType = "SQL_Injection" type = "string" field = ""/>
      <constraint flawType = "XPath_Injection" type = "string" field = ""/>
    </constraints>
    <safeties>
      <safety flawType = "SQL_Injection" safe = "0" needQuote = "1"/>
      <safety flawType = "XPath_Injection" safe = "0" needQuote = "1"/>
    </safeties>
    <relevancy>1</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_urlencode</dir>
    </path>
    <comment>SANITIZE : use of urlencode</comment>
    <codes>
      <code>$tainted = urlencode($tainted);</code>
    </codes>
    <constraints>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "1" styleBlock = "1" simpleQuote = "1" rule1 = "1"/>
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_rawurlencode</dir>
    </path>
    <comment>SANITIZE : use of rawurlencode</comment>
    <codes>
      <code>$tainted = rawurlencode($tainted);</code>
    </codes>
    <constraints>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "1" styleBlock = "1" simpleQuote = "1" rule1 = "1"/>
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>

  <sample>
    <flaws>
      <flaw>XSS</flaw>
    </flaws>
    <path>
      <dir>func_http_build_query</dir>
    </path>
    <comment>SANITIZE : use of http_build_query</comment>
    <codes>
      <code>$tainted = http_build_query($tainted);</code>
    </codes>
    <constraints>
      <constraint flawType = "XSS"/>
    </constraints>
    <safeties>
      <safety flawType = "XSS" doubleQuote = "1" scriptBlock = "1" styleBlock = "1" simpleQuote = "1" rule1 = "1" rule5 = "1"/>
    </safeties>
    <relevancy>0.5</relevancy>
  </sample>
</sanitize>
